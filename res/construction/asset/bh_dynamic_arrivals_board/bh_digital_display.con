local constructionutil = require "constructionutil"
local transf = require "transf"
local utils = require "bh_dynamic_arrivals_board/bh_utils"

local styles = { "digital_display", "digital_display_nopole", "digital_display_floating" }

local function configKey(name)
	return "bh_digital_display_" .. name
end

local function mdl(model)
	return "bh_dynamic_arrivals_board/bh_manchester_metrolink_" .. model .. ".mdl"
end

local function joinTables(t, t2)
	local ret = {}
	for _, v in ipairs(t) do
		ret[#ret+1] = v
	end
	for _, v in ipairs(t2) do
		ret[#ret+1] = v
	end
	return ret
end

local function makeParams()
	local params = {}

	params[#params+1] = {
		key = configKey("style"),
		name = _("Style"),
		uiType = "ICON_BUTTON",
		values = utils.parameterIcons(styles)
	}

	utils.makeRotateParams(params, configKey)
	utils.makeOffsetParams(params, configKey)

	return params
end

function data()

	return { 
		type = "ASSET_TRACK",
		description = { 
			name = _("Dynamic Arrivals Board"),
			description = _("A digital display showing approaching trains"),
			icon = "ui/construction/asset/bh_dynamic_arrivals_board/bh_digital_display_construction@2x.tga"
		},
		availability = {},
		buildMode = "SINGLE",
		categories = { "badgerrhax" },
		order = 13,
		skipCollision = true,
		autoRemovable = false,
		params = makeParams(),
		
		updateFn = function(params)
			local result = { }
			result.models = {}

			local rotate = utils.readRotateParams(params, configKey)
			rotate.x = rotate.x + math.pi / 2

			local offset = utils.readOffsetParams(params, configKey)
			offset.y = offset.y - 4.95
			offset.z = offset.z + 0.54

			local style = styles[params[configKey("style")]+1]
      local model = mdl(style)
      result.models[#result.models + 1] = {
        id = model, transf = constructionutil.rotateTransf(params, transf.rotZYXTransl(rotate, offset))
      }

			local labelValues = {
				params[configKey("line1_dest")],
				params[configKey("line2_dest")],
				params[configKey("time_string")],
				params[configKey("line1_time")],
				params[configKey("line2_time")],
			}

			result.labelText = {
				[#result.models-1] = joinTables(labelValues, labelValues) -- our sign is 2-sided with same values on both
			}

			result.terrainAlignmentLists = { { type = "EQUAL", faces = {} }}
			result.groundFaces = {}

      -- specifically to make the game treat this as a construction
			result.personCapacity = { type = "RESIDENTIAL", capacity = 1, }

			return result
		end
	}

end